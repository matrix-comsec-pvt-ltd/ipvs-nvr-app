#if !defined COMMON_API_H
#define COMMON_API_H

#ifdef __cplusplus
extern "C" {
#endif
//#################################################################################################
// FILE BRIEF
//#################################################################################################
/**
@file		CommonApi.h
@brief      File containing the prototype of different common functions for all applications
*/
//#################################################################################################
// @INCLUDES
//#################################################################################################
/* OS Includes */
#include <pthread.h>
#include <limits.h>

/* Application Includes */
#include "MxTypedef.h"

//#################################################################################################
// @DEFINES
//#################################################################################################
/* 0 is considered the invalid errno refer man page of errno */
#define INVALID_ERROR_CODE      0

#define SET_ERROR_NUMBER(pErrorCode, errorNo)     if (pErrorCode)   *pErrorCode = errorNo;

//#################################################################################################
// @DATA TYPES
//#################################################################################################
enum
{
    DETACHED_THREAD = 0,
    JOINABLE_THREAD,
};

//#################################################################################################
// @PROTOTYPES
//#################################################################################################
//-------------------------------------------------------------------------------------------------
BOOL Utils_CreateThread(pthread_t *rThreadId, void *(*rRoutine)(void *), void *rData, BOOL threadType, UINT32 stackSizeBytes);
//-------------------------------------------------------------------------------------------------
BOOL Utils_ExeCmd(const CHARPTR rCmd);
//-------------------------------------------------------------------------------------------------
ssize_t Utils_Write(INT32 iFd, const void *iBuffer, size_t iCount, UINT32PTR pErrorCode);
//-------------------------------------------------------------------------------------------------
ssize_t Utils_pWrite(INT32 iFd, const void *iBuffer, size_t iCount, off_t iOffset, UINT32PTR pErrorCode);
//-------------------------------------------------------------------------------------------------
INT32 Utils_Mkdir(const CHAR *pPath, mode_t iMode, UINT32PTR pErrorCode);
//-------------------------------------------------------------------------------------------------
ssize_t Utils_Read(INT32 iFd, void *pBuffer, size_t iBytes, UINT32PTR pErrorCode);
//-------------------------------------------------------------------------------------------------
//#################################################################################################
// @END OF FILE
//#################################################################################################
#ifdef __cplusplus
}
#endif
#endif
